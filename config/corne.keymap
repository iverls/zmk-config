/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/pointing.h>


/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | SHFT  |
//                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
                        bindings = <
   &kp TAB   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp BSPC
   &kp LCTRL &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
   &kp LSHFT &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp RSHFT
                  &kp LGUI &mo 1 &kp SPACE   &kp RET &mo 2 &kp RALT
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |  ESC |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | DEL |
// | CTRL |VOL_D| MUTE|VOL_U| BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |     |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     | SHFT|
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp ESC   &kp N1     &kp N2           &kp N3 &kp N4 &kp N5 &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 &kp DEL
   &kp LCTRL  &trans &consumer C_VOLUME_DOWN  &consumer C_MUTE &consumer C_VOLUME_UP &trans   &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans
   &kp LSHFT &consumer C_PREV &consumer C_PLAY_PAUSE &consumer C_NEXT &trans &trans &trans &trans &trans &trans &trans &kp RSHFT
                              &kp LGUI &trans &kp SPACE &kp RET &trans &kp RALT
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | DEL |
// | F1 | F2    |  F3   |  F4   |  F5   |  F6   |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | F7 |  F8   |  F9   |  F10  |  F11  |  F12  |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp  ESC  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp ASTRK &kp LPAR &kp RPAR &kp DEL
   &kp F1 &kp F2   &kp F3 &kp F4   &kp F5   &kp F6      &kp MINUS &kp EQUAL &kp LBKT  &kp RBKT &kp BSLH &kp GRAVE
   &kp F7 &kp F8   &kp F9 &kp F10   &kp F11   &kp F12      &kp UNDER &kp PLUS  &kp LBRC  &kp RBRC &kp PIPE &kp TILDE
                             &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
                        >;
                };

                layer3 {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  BT1  |  BT2  | BT3 |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  BT4   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  BT5   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp  TAB  &kp EXCL &mkp MS_ACCEL0 &mkp MS_ACCEL1 &mkp MS_ACCEL2 &rgb_ug_hue_up   &mkp MB4 &mkp MB5  &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3
   &kp LCTRL &rgb_ug_saturation_up   &mkp MB3 &mkp MB2   &mkp MB1   &rgb_ug_hue_down      &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_UP  &mmv MOVE_RIGHT &trans &bt BT_SEL 4
   &kp LSHFT &rgb_ug_saturation_down   &rgb_ug_mode_next &rgb_ug_brt_down   &rgb_ug_brt_up   &rgb_ug_toggle      &msc MOVE_LEFT &msc MOVE_DOWN  &msc MOVE_UP  &msc MOVE_RIGHT &trans &trans
                             &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
                        >;
                };

        };

        
conditional_layers {
    layer3 {
        if_layers = <1 2>;
        then_layer = <3>;
    };
};

&mmv {
    x-input-code = <INPUT_REL_X>;
    y-input-code = <INPUT_REL_Y>;
    time-to-max-speed-ms = <400>;
    acceleration-exponent = <2>;
};

&msc {
    x-input-code = <INPUT_REL_HWHEEL>;
    y-input-code = <INPUT_REL_WHEEL>;
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
};
};
